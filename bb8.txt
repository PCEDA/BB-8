#define CUSTOM_SETTINGS
#define INCLUDE_GAMEPAD_MODULE
#include <Dabble.h>

//Constantes para sonido
#define F4  349.23
#define Fs4 369.99
#define G4  392.00
#define Gs4 415.30
#define A4  440.00
#define As4 466.16
#define B4  493.88
#define C5  523.25
#define Cs5 554.37
#define D5  587.33
#define Ds5 622.25
#define E5  659.26
#define F5  698.46
#define Fs5 739.99
#define G5  783.99
#define Gs5 830.61

//variables para sonido
int sel=0;
int sal_buzzer=13;

//pines del motor A
int motorApin1 = 4;
int motorApin2 = 5;

//pines del motor B
int motorBpin1 = 6;
int motorBpin2 = 7;

float vel_max;
float velA;
float velB;

float p; //relación entre velocidades A y B
int estado; //casos posibles

enum estado{
  derecha_arriba,
  arriba,
  izquierda_arriba,
  izquierda,
  izquierda_abajo,
  abajo,
  derecha_abajo,
  derecha
};

//FUNCIONES PARA MOTORES
void f_derecha_arriba(){
  velA=vel_max;
  velB=p/6*velA;
  digitalWrite(motorApin1, HIGH);
  digitalWrite(motorApin2, LOW);
  digitalWrite(motorBpin1, HIGH);
  digitalWrite(motorBpin2, LOW);
  //mismo sentido (1)
}

void f_arriba(){
  velA=vel_max;
  velB=velA;
  digitalWrite(motorApin1, HIGH);
  digitalWrite(motorApin2, LOW);
  digitalWrite(motorBpin1, HIGH);
  digitalWrite(motorBpin2, LOW);
  //mismo sentido (1)
}

void f_izquierda_arriba(){
  velB=vel_max;
  velA=p/6*velB;
  digitalWrite(motorApin1, HIGH);
  digitalWrite(motorApin2, LOW);
  digitalWrite(motorBpin1, HIGH);
  digitalWrite(motorBpin2, LOW);
  //mismo sentido (1)
}

void f_izquierda(){
  velA=vel_max;
  velB=velA;
  digitalWrite(motorApin1, HIGH);
  digitalWrite(motorApin2, LOW);
  digitalWrite(motorBpin1, LOW);
  digitalWrite(motorBpin2, HIGH);
  //sentido contrario
}

void f_izquierda_abajo(){
  velA=vel_max;
  velB=p/6*velA;
  digitalWrite(motorApin1, LOW);
  digitalWrite(motorApin2, HIGH);
  digitalWrite(motorBpin1, LOW);
  digitalWrite(motorBpin2, HIGH);
  //mismo sentido (2)
}

void f_abajo(){
  velA=vel_max;
  velB=velA;
  digitalWrite(motorApin1, LOW);
  digitalWrite(motorApin2, HIGH);
  digitalWrite(motorBpin1, LOW);
  digitalWrite(motorBpin2, HIGH);
  //mismo sentido (2)
}

void f_derecha_abajo(){
  velB=vel_max;
  velA=p/6*velB;
  digitalWrite(motorApin1, LOW);
  digitalWrite(motorApin2, HIGH);
  digitalWrite(motorBpin1, LOW);
  digitalWrite(motorBpin2, HIGH);
  //mismo sentido (2)
}

void f_derecha(){
  velA=vel_max;
  velB=velA;
  digitalWrite(motorApin1, LOW);
  digitalWrite(motorApin2, HIGH);
  digitalWrite(motorBpin1, HIGH);
  digitalWrite(motorBpin2, LOW);
  //sentido contrario
}

//FUNCIONES ALTAVOZ
void beep(int note, int duration)
{
  //Reproducir tono en el altavoz
  tone(sal_buzzer, note);
  delay(duration);
  //Parar tono
  noTone(sal_buzzer);
  delay(50);
}

void beep2(int note, int duration)
{
  //Reproducir tono en el altavoz
  tone(sal_buzzer, note);
  delay(duration);
  //Parar tono
  noTone(sal_buzzer);
  delay(2);
}

//Melodía 1 parte 1
void firstSection()
{
  beep(A4, 500);
  beep(A4, 500);    
  beep(A4, 500);
  beep(F4, 350);
  beep(C5, 150);  
  beep(A4, 500);
  beep(F4, 350);
  beep(C5, 150);
  beep(A4, 650);

  delay(500);

  beep(E5, 500);
  beep(E5, 500);
  beep(E5, 500);  
  beep(F5, 350);
  beep(C5, 150);
  beep(Gs4, 500);
  beep(F4, 350);
  beep(C5, 150);
  beep(A4, 650);

  delay(500);
}

//Melodía 1 parte 2
void secondSection()
{
  beep(A5, 500);
  beep(A4, 300);
  beep(A4, 150);
  beep(A5, 500);
  beep(Gs5, 325);
  beep(G5, 175);
  beep(Fs5, 125);
  beep(F5, 125);    
  beep(Fs5, 250);

  delay(325);

  beep(As4, 250);
  beep(Ds5, 500);
  beep(D5, 325);  
  beep(Cs5, 175);  
  beep(C5, 125);  
  beep(B4, 125);  
  beep(C5, 250);  

  delay(350);
}

//Melodía 2
void sonido1()
{
beep2(335, 44);
beep2(350, 31);
beep2(223, 35);
noTone(sal_buzzer);
delay(73);
beep2(227, 60);
noTone(sal_buzzer);
delay(105);
beep2(282, 92);
for(int i=282;i<=554; i=i+8){
  beep2(i,5);
}
beep2(554, 52);
noTone(sal_buzzer);
delay(54);
beep2(549, 113);
noTone(sal_buzzer);
delay(43);
beep2(309, 100);
for(int i=309;i<=741; i=i+6){  //Si da problemas se puede hacer 744, 15, 5
  beep2(i,2);
}
noTone(sal_buzzer);
delay(92);
beep2(311, 68);
for(int i=311;i<=344; i=i+11){
  beep2(i,45);
}
delay(1000);
}    

void setup() {
  pinMode(motorApin1, OUTPUT);
  pinMode(motorApin2, OUTPUT);
  pinMode(motorBpin1, OUTPUT);
  pinMode(motorBpin2, OUTPUT);

  pinMode(9,  OUTPUT);
  pinMode(10, OUTPUT);
  Serial.begin(9600);
  Dabble.begin(9600); //Recomendado 9600

  //salida altavoz
  pinMode(sal_buzzer,OUTPUT);
  
}

void loop() {
//Obtención datos del joystick
Dabble.processInput();
  int a = GamePad.getAngle();
  int b = GamePad.getRadius();

//relación entre radio y velocidad(0-255)
vel_max=b*255/7;

//definimos velocidad de cada motor
analogWrite(9, velA); //ENA pin
analogWrite(10, velB); //ENB pin

switch(estado){
  case derecha_arriba:
  f_derecha_arriba();
  break;
 
  case arriba:
  f_arriba();
  break;
 
  case izquierda_arriba:
  f_izquierda_arriba();
  break;
 
  case izquierda:
  f_izquierda();
  break;

  case izquierda_abajo:
  f_izquierda_abajo();
  break;
 
  case abajo:
  f_abajo();
  break;

  case derecha_abajo:
  f_derecha_abajo();
  break;

  case derecha:
  f_derecha();
  break;
}
 
if(0<a && a<90){
  estado=derecha_arriba;}

if(a==90){
  estado=arriba;}

if(90<a && a<180){
  estado=izquierda_arriba;}

if(a==180){
  estado=izquierda;}
  
if(180<a && a<270){
  estado=izquierda_abajo;}
 
if(a==270){
  estado=abajo;}

if(270<a && a<360){
  estado=derecha_abajo;}

if(a==0){
  estado=derecha;}

if(a==15 || a==165 || a==195 || a==345){
  p=1;}

if(a==30 || a==150 || a==210 || a==330){
  p=2;}
 
if(a==45 || a==135 || a==225 || a==315){
  p=3;}

if(a==60 || a==120 || a==240 || a==300){
  p=4;}

if(a==75 || a==105 || a==255 || a==285){
  p=5;}

//Selección de melodías
if (GamePad.isUpPressed())
  {sel=1; //Melodía 1
  Serial.println("Arriba");
  }
if (GamePad.isDownPressed())
  {sel=2; //Melodía 2
  Serial.println("Abajo");
  }
  
//Melodía 1
if(sel==1){
  firstSection();
  sel=0;
}
if(sel==2){
sonido1();
sel=0;
}
}